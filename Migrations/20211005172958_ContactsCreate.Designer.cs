// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ReservationsAPI.Migrations
{
    [DbContext(typeof(ReservationsContext))]
    [Migration("20211005172958_ContactsCreate")]
    partial class ContactsCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ReservationsAPI.Models.Cliente", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Email");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Contacto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Contacto");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contacto");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Establishment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ID");

                    b.ToTable("Establishment");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Evento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.HasKey("ID");

                    b.HasIndex("EstablishmentID");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PagaImpuesto")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Provider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ID");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClienteEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ClienteID")
                        .HasColumnType("int");

                    b.Property<int>("EventoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClienteEmail");

                    b.HasIndex("EventoID");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("ReservationsAPI.Models.EstablishmentContact", b =>
                {
                    b.HasBaseType("ReservationsAPI.Models.Contacto");

                    b.Property<int>("EstablishmentID")
                        .HasColumnType("int");

                    b.HasIndex("EstablishmentID");

                    b.HasDiscriminator().HasValue("EstablishmentContact");
                });

            modelBuilder.Entity("ReservationsAPI.Models.ProviderContact", b =>
                {
                    b.HasBaseType("ReservationsAPI.Models.Contacto");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.HasIndex("ProviderID");

                    b.HasDiscriminator().HasValue("ProviderContact");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Evento", b =>
                {
                    b.HasOne("ReservationsAPI.Models.Establishment", "Establishment")
                        .WithMany("Eventos")
                        .HasForeignKey("EstablishmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Product", b =>
                {
                    b.HasOne("ReservationsAPI.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Reservation", b =>
                {
                    b.HasOne("ReservationsAPI.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationsAPI.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ReservationsAPI.Models.EstablishmentContact", b =>
                {
                    b.HasOne("ReservationsAPI.Models.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("ReservationsAPI.Models.ProviderContact", b =>
                {
                    b.HasOne("ReservationsAPI.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ReservationsAPI.Models.Establishment", b =>
                {
                    b.Navigation("Eventos");
                });
#pragma warning restore 612, 618
        }
    }
}
